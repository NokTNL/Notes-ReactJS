// redux toolkit will still make importing from "redux" work:
import { createSlice, createStore, configureStore } from "@reduxjs/toolkit";

const initialState = { counter: 0, showCounter: true };

// createSlice: creates a group of reducers to prevent working with the whole state every time
// it creates a sub-group of action types for us
const counterSlice = createSlice({
  // name of the slice; will be the PREFIX of all the action types in this slice
  name: "counter",
  // Need to specify the initial state of this slice as it will be run once when creating the store
  initialState,
  // An object listing the reducers this slice needs
  // The individual object keys will become the name of the action TYPE
  reducers: {
    // !! You CAN write mutating code in these reducers
    // It is because redux toolkit uses Immer under the hood and converts it to non-mutating code
    increment(state) {
      state.counter++;
    },
    decrement(state) {
      state.counter--;
    },
    increase(state, action) {
      state.counter += action.payload;
    },
    toggle(state) {
      state.showCounter = !state.showCounter;
    },
  },
});

// createSlice returns an object:
/* 
  {
    ...
    reducer: (a unified piece of reducer function incorporting all the reducers)
    actions: (an object with METHODS corresponding to the methods we defined in "reducers" in createSlice
    // !! These are ACTION-CREATING METHODS, because they returns an ...
    // ... ACTION OBJECT that can be passed into store.dispatch, i.e.
    // {
    //  type: "auto-generate type name",
    //  payload: (the payload you passed into the method)
    // }
    // - These are generated by createAction under the hood
    ...
  }
*/

// the reducer can be passed into createStore:
const store = createStore(counterSlice.reducer);

// If you have multiple slices, you can use combineReducers in redux toolkit first then pass to createStore
// Alternatively, use configureStore:

const store2 = configureStore(
  // Pass in a configuration object:
  {
    reducer: counterSlice.reducer,
    // assign reducer with an object of reducers if there are more than one (!! don't put only one reducer in an object!)
    // These will be passed into combineReducers and combined into one
  }
);

export default store;

// the actions can be exported as well so that we don't need worry about ...
// ... calling the wrong action "type" in our components because of typos
export const counterActions = counterSlice.actions;
